<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《WEB开发-HEXO博客搭建》第一章Hexo博客搭建]]></title>
    <url>%2F2019%2F08%2F23%2F%E3%80%8AWEB%E5%BC%80%E5%8F%91-HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[《WEB开发-HEXO博客搭建》第1章 Hexo博客搭建 Hexo官方：https://hexo.io/ Hexo官方(中文)：https://hexo.io/zh-cn/ Node.js官方网站：https://nodejs.org/en/ Node.js官方文档：https://nodejs.org/en/docs/ Node.js安装文档：https://nodejs.org/en/download/package-manager/ 1.1 Hexo简介 Hexo是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统。 1.2 node.js安装 Hexo是基于node.js的，所以我们在安装它之前需要用到npm安装工具，这个工具是 node.js 安装包的工具，所以，我们先要安装 node.js。 笔者是用的Windows 64位的，到node.js下载安装包。 图1 下载后直接安装就可以啦，和普通的软件没有什么大的区别，所有笔者就不赘述了。 1.3 GitHub账户创建及客户端安装 关于git账户创建及客户端下载安装等可参看笔者的博客，笔者在这里就不在赘述了。 GitHub官网：https://github.com/ Git和Github的使用：https://blog.csdn.net/u013162035/article/details/78476880 Git下载：https://git-scm.com/downloads Git安装：https://blog.csdn.net/u013162035/article/details/78464161 在github网页上创建一个以username.github.io命名的repositories,此时username为自己github的账号名称。 1.4安装hexo 使用npm安装Hexo，输入以下命令： $ npm install hexo-cli -g 1.5创建Blog 笔者在D盘下新建一个blog的文件夹，然后进入blog文件夹，单击右键打开git bash。 1. 创建一个叫blog网站 $ hexo init 如果没有进入blog文件夹， 就会在当前目录进行初始化。这是初始化命令就要加blog。 $ hexo init blog 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名。 2. 我们进入创建的blog目录里. 并运行该服务 $ npm install $ hexo server 【注】hexo命令 $ hexo install 3. 测试网页 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页 4.修改blog目录下的_config.yml配置文件将网站自部署到Github上 $ vim _config.yml 添加如下内容 git repo: git@github.com:用户名/用户名.github.io.git branch: master 1 2 3 【注】在type前面需要增加两个空格，在type的冒号后面需要增加一个空格。请保持代码风格一致，否则会出现错误或是不正确的问题。 5.安装部署使用到的git插件 在这里我们使用的是git源码管理工具，所以，我需要安装git包进行部署，安装这个插件才能使用git进行自动部署。 $ npm install hexo-deployer-git -save 在接下来，我们将要生成网站了，首先清理一下缓存。 $hexo clean 6.进行生成网站 当我们部署网站前，需要先生成静态网站。它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里。 $ hexo g或hexo generate 7.进行自动部署网站 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署，生成网站前第6步。 $ hexo d或hexo deploy 如果在部署出现错误信息如果下: 请参考第5步，需要安装git插件 ERROR Deployer not found: git 以上两步可以使用一步就可以搞定： $hexo g -d 【注】上述的部署指令中hexo deploy可以换成hexo server，两者的区别在于，前者是将博客部署到远程的Github上，而后者是运行在本地，通过http://localhost:4000在浏览器中访问。后者是为了调试配置方便而使用，但是最终本地博客还是需要hexo deploy指令将其部署至Github上。 接下来就是查看是否成功啦。打开浏览器输入IP地址。 图2 表明创建成功了。 参考文章：https://blog.csdn.net/u013162035/article/details/80718576]]></content>
      <categories>
        <category>WEB开发-HEXO博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019最新的解决百度网盘下载限速的方法，不限速下载百度云破解版]]></title>
    <url>%2F2019%2F08%2F23%2F2019%E6%9C%80%E6%96%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E9%99%90%E9%80%9F%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E4%B8%8D%E9%99%90%E9%80%9F%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E4%BA%91%E7%A0%B4%E8%A7%A3%E7%89%88%2F</url>
    <content type="text"><![CDATA[2019最新的解决百度网盘下载限速的方法，不限速下载百度云破解版 下载地址，点击下载，提取码：c25f 永久有效https://pan.baidu.com/s/1G2X8diMTPzTyC_oOvgkyWw 不限速下载以下为软件使用教程，必看 软件使用教程：首先：在打开软件以后先观察是否弹出更新提示，如果有更新提示则必须要更新，一般选择在线自动更新。 第一步，把压缩包下载并解压到你的电脑上，但不要解压到C盘和桌面上。解压完成以后文件夹里的文件如图所示图中用红圈圈出来的文件就是运行的主程序第二步：点击红框中的文件会出现下图中的样子第三步：然后登陆自己的网盘账号以后开始下载情况1、下载自己网盘里的东西 登录之后找到你网盘里的想要下载的文件（不要直接点下载），点击“分享并下载”，然后再确认下载就OK了。 情况2、如果下载在别处获得的链接，请在“下载”栏目下面的“下载分享链接”处下载。如果出现无限验证码或其他错误也可以先保存到自己网盘，然后用1中的方法。软件非常好用，需要的同学可以点击下载了：链接：https://pan.baidu.com/s/1G2X8diMTPzTyC_oOvgkyWw&gt; 提取码：c25f 永久有效]]></content>
      <categories>
        <category>百度云</category>
      </categories>
      <tags>
        <tag>百度云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot-index1]]></title>
    <url>%2F2019%2F08%2F23%2FRESTfull%20API%E7%AE%80%E5%8D%95%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[RESTfull API简单项目的快速搭建对spring框架盛行了多年的java方向开发人员来说，每个人java开发已经把spring框架当做开发中不可或缺的一部分。之前传统的模式都是以applicationContext.xml配置文件的形式存在，而对应大多数入门级开发人员来说配置出现一点纰漏就会导致运行失败或者更大的问题，因此会浪费开发人员很多宝贵的时间，对公司来说也是有所损失。那么spring开源组织很早之前就意识到这种问题的存在，于是他们便对spring框架的全系列组件进行了内部封装。对外只是提供maven（jar管理、项目打包工具）或者gradle（新兴jar管理、项目打包工具）的形式来进行引入parent.pom（maven配置文件）或者parent.gradle（gradle配置文件），让每一个spring项目都是以spring的子项目的形式来运行，这样开发人员不用再去注重配置文件的繁琐而是把精力放到业务逻辑以及更深层次的架构方面。自此SpringBoot就诞生了，它有着纯正的开源血统，在此非常感谢spring开源组织给我们java开发人员带来的便利！ SpringBoot主要优点： 为所有Spring开发者更快的入门 开箱即用，提供各种默认配置来简化项目配置 内嵌式容器简化Web项目 没有冗余代码生成和XML配置的要求 提供一系列大型企业级项目的功能性特性（比如：安全、健康检测、外部化配置、数据库访问、restful搭建等很多特性这里就不一一叙说了，后期文章会陆续更新） 本章目的使用springboot完成一个简单的web（springmvc）应用程序，通过@restController输出”HelloWord”到界面，让我们初步体验springboot的快速开发、简单的特性。 系统要求 jdk1.8 springboot 1.5.2.RELEASE 开发工具（IntelliJ IDEA 2017.1.1） 数据库管理工具（Navicat Premium 11.1.7） 文本管理工具（sublime text 3） apache maven（3.3.9，本章采用maven形式管理jar包，具体配置环境变量以及使用请自行查找资料） 开始构建项目目前构建项目有多种方式我这里简单介绍两种。1、使用spring官网 SPRING INITIALIZR 来构建项目结构（地址：http://start.spring.io/）2、使用IntelliJ IDEA开发工具来构建项目结构 使用SPRING INITIALIZR构建访问start.spring.io/网址就会看到如下 “图1” 界面：界面主要部分包括：管理工具，springboot版本，包名（group），工程名（Artifact），已选模块（我已经选择了一个web模块）。点击Generate Project就会下载一个根据你输入的信息创建的项目工程架构源码的压缩包。解压压缩包到指定目录（目录你可以随意定义）我这里为了后续操作先定义到E:/lessions内可以看到如下“图2”所示：解压完成之后我们就可以通过IntelliJ IDEA开发工具导入到工程， 菜单中选择File–&gt;New–&gt;Project from Existing Sources… 选择解压后的项目文件夹，点击OK 点击Import project from external model并选择Maven，点击Next到底为止。 若你的环境有多个版本的JDK，注意到选择Java SDK的时候请选择系统安装1.8版本 使用IntelliJ IDEA构建打开工具，界面如下 “图3” 所示：我们点击Create New Project来创建一个新的springboot应用程序，点击后如下“图4”所示：我们点击Next继续下一步操作，根据界面输入选项填写对应的内容即可如“图5”所示：点击Next即可完成创建项目，而且创建完成后会自动导入到项目工程内就不需要再次import操作，这种方式会比较简单些，所以我们的文章内都会采用第二种形式来创建新工程。 在下一步我们勾选Web依赖加入到我们的项目中，如下图所示： 项目目录结构我们来看看工具为我们生成新工程的目录结构，如”图6“所示：我们可以看到目录结构有如下几个： 1、/src/main/java/ 存放项目所有源代码目录2、/src//main/resources/ 存放项目所有资源文件以及配置文件目录3、/src/test/ 存放测试代码目录 自动生成的文件解释SpringBoot21Application 该类是程序的入口类内有个main方法，可以直接通过run as运行项目application.properties 该配置文件是项目的核心配置文件，以xx.xx.xx的形式存在pom.xml maven配置文件，因为我们采用的maven管理jar，所以这里会自动生成一个pom文件 @SpringBootApplication注解我们可以看到工具为我们自动生成的入口程序是有@SpringBootApplication的这么一个注解，那它主要是做什么的呢？不难看出，它是声明当前类为sprinboot的入口类。而一个springboot项目内有且只能有一个这个注解存在。 初尝试运行项目我们在入口程序类中右键-&gt;Run LessonOneApplication在控制台的输出如下”图8“所示，证明你已经成功的运行了springboot项目。 可以看到我们的项目是通过内置的tomcat容器启动的，并且端口号默认是8080（至于如何修改端口号后期文章中更新）。我们现在通过浏览器直接访问是得不到任何回应的，只是会有一个错误页面，如下”图9“所示 编写IndexController我们首先在/src/main/java/com/lqg (该目录是你构建项目的目录) 目录下创建一个叫做controller的包，然后在controller包下再创建一个叫做IndexController的类，我们使用@RestController来声明我们新创建的IndexController是一个访问控制器,详细代码如下： 12345678910111213package com.lqg.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping(value = "/index")public class IndexController &#123; @RequestMapping public String index()&#123; return "hello spring boot"; &#125;&#125; 可以看到我在IndexController类上配置了一个@RequestMapping注解来声明index()方法可以通过127.0.0.1:8080/index访问到，那么我们接下来重新启动项目（项目中如果重启出错应该是注解配置问题），访问地址如下”图10“所示：在IndexController类里面在写一个方法，返回值是map集合，参数列表是String类型的name，@RequestParam简单类型的绑定的注解，这个注解要放在参数列表的前面 123456789101112131415161718192021222324252627282930package com.lqg.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.HashMap;@RestController@RequestMapping(value = "/index")public class IndexController &#123; @RequestMapping public String hello()&#123; return "hello spring boot "; &#125; /** * @RequestParam 简单类型的绑定，可以出来get和post * @param name * @return */ @RequestMapping(value = "/get") public HashMap&lt;String,Object&gt; get(@RequestParam String name)&#123; HashMap&lt;String,Object&gt; map = new HashMap&lt;&gt;(); map.put("title", "hello world"); map.put("name", name); return map; &#125;&#125; 那么Controller层是如何返回一个Bean对象呢？先在/src/main/java/com/lqg下面创建一个bean包，在bean包里创建一个User类，详细代码如下： 123456789101112131415161718package com.lqg.bean;import lombok.Getter;import lombok.Setter;import java.util.Date;/** * @author 凌枫lqg */@Getter@Setterpublic class User &#123; private int id; private String name; private Date date;&#125; @Getter@Setter：注解是lombok插件里面的，用这个注解就可以省略getter和setter方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.lqg.controller;import com.lqg.bean.User;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.xml.crypto.Data;import java.util.Date;import java.util.HashMap;@RestController@RequestMapping(value = "/index")public class IndexController &#123; @RequestMapping public String hello()&#123; return "hello spring boot "; &#125; /** * @RequestParam 简单类型的绑定，可以出来get和post * @param name * @return */ @RequestMapping(value = "/get") public HashMap&lt;String,Object&gt; get(@RequestParam String name)&#123; HashMap&lt;String,Object&gt; map = new HashMap&lt;&gt;(); map.put("title", "hello world"); map.put("name", name); return map; &#125; /** * @PathVariable 获得请求url中的动态参数 * @param id * @param name * @return */ @RequestMapping(value = "/find/&#123;id&#125;/&#123;name&#125;") public User get(@PathVariable int id,@PathVariable String name)&#123; User user = new User(); user.setId(id); user.setName(name); user.setDate(new Date()); return user; &#125;&#125; 第二个方法访问的结果如下第三个方法访问的结果如下： SpringBoot的测试SpringBoot测试可以通过Spring提供的测试类MockMvc 123456789101112131415161718192021222324252627282930313233343536373839package com.lqg;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import com.lqg.controller.IndexController;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.RequestBuilder;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import com.lqg.controller.IndexController;@RunWith(SpringRunner.class)@SpringBootTestpublic class SpringbootDemo21ApplicationTests &#123; //SpringBoot测试可以通过Spring提供的测试类MockMvc private MockMvc mvc; @Before public void setup() &#123; //这是通过setup方法引入mvc this.mvc = MockMvcBuilders.standaloneSetup(new IndexController()).build(); &#125; @Test public void contextLoads() throws Exception &#123; //生成request一个请求 RequestBuilder request = get("/index"); //用mvc的请求，期望它的状态码是ok的，期望它返回的内容，返回的是一个字符串hello spring boot mvc.perform(request).andExpect(status().isOk()).andExpect(content().string("hello spring boot")); &#125;&#125; SpringBoot打包 打包成功后的jar包，打包命令mvn clean install -DskipTests 在命令行运行spring boot]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
</search>
